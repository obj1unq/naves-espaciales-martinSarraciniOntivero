import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 270000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}
	test "propulsar Nave"{
		naveVacia.propulsar(20000)
		assert.equals(20000, naveVacia.velocidad())
	}


}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}
		test " llegar a limite de velocidad"{
		naveConPasajeros.propulsar(20000)
		assert.equals(300000, naveConPasajeros.velocidad())
	}

}

describe "Nave de combate" {

	//const naveEnReposo = new NaveDeCombate()
	//const naveEnAtaque = new NaveDeCombate(modo = ataque)
	const naveEnAtaque = new NaveDeCombate(velocidad = 0, modo = ataque)
	const naveEnReposo = new NaveDeCombate(velocidad =0, modo = reposo)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
	test "prepararse para viajar nave reposo"{
		naveEnReposo.prepararParaViajar()
		assert.equals(15000, naveEnReposo.velocidad())
		assert.equals(ataque, naveEnReposo.modo())
		assert.equals("saliendo en mision", naveEnReposo.ultimoMensaje())
	}
		test "prepararse para viajar nave ataque"{
		naveEnAtaque.prepararParaViajar()
		assert.equals(15000, naveEnAtaque.velocidad())
		assert.equals("volviendo a la base", naveEnAtaque.ultimoMensaje())
	}
}

describe " Nave De Carga Radioactiva" {
	const naveCargadaYSellada = new NaveCargaRadiactiva(velocidad = 10000, carga= 5000, sellado= true)
	const naveVacia = new NaveCargaRadiactiva(velocidad = 0, sellado = false)
  test "recibir amenaza" {
	naveCargadaYSellada.recibirAmenaza()
	assert.equals(0, naveCargadaYSellada.velocidad())
	assert.equals(5000, naveCargadaYSellada.carga())
  }
  test "prepararse para viajar"{
	naveVacia.prepararParaViajar()
	assert.equals(15000, naveVacia.velocidad())
	assert.equals(true, naveVacia.sellado())
  }
}

describe "encontrarse con nave enemiga"{
	const navePasajerosVacia = new NaveDePasajeros()
	test "nave pasajeros"{
		navePasajerosVacia.encontrarseConEnemigo()
		assert.equals(20000, navePasajerosVacia.velocidad())
		assert.equals(true, navePasajerosVacia.alarma())
	}
	//falt test con otras naves
}

